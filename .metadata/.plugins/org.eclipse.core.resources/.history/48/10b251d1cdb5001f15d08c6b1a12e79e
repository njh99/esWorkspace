package co.kh.dev352.signup.model;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import co.kh.dev352.common.DBUtility;

public class signupDAO {
	private final String SELECT_SQL = "SELECT * FROM SIGNUP ORDER BY NO";
	private final String SELECT_BY_ID_SQL = "SELECT * FROM SIGNUP WHERE ID = ?";
	private final String SELECT_LOGIN_CHECK_SQL = "SELECT * FROM SIGNUP WHERE ID = ? AND PWD = ?";
	private final String INSERT_SQL = "INSERT INTO SIGNUP VALUES((SELECT NVL(MAX(NO),0)+1 FROM SIGNUP),?,?,?,SYSDATE)";
	private final String DELETE_SQL = "DELETE FROM SIGNUP WHERE NO = ?";
	private final String UPDATE_SQL = "UPDATE SIGNUP SET NAME= ? , PWD = ? WHERE ID = ?";

	// 전체를 DB에서 출력
	public ArrayList<signupVO> selectDB() {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<signupVO> mList = new ArrayList<signupVO>();
		try {
			pstmt = con.prepareStatement(SELECT_SQL);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				int no = rs.getInt("NO");
				String name = rs.getString("NAME");
				String id = rs.getString("ID");
				String pwd = rs.getString("PWD");
				Date regdate = rs.getDate("REGDATE");
				signupVO svo = new signupVO(no, name, id, pwd, regdate);
				mList.add(svo);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return mList;
	}

	// 아이디를 받아서 아이디에 맞는 레코드 출력
	public signupVO selectByIdDB(signupVO svo) {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = con.prepareStatement(SELECT_BY_ID_SQL);
			pstmt.setString(1, svo.getId());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				int no = rs.getInt("NO");
				String name = rs.getString("NAME");
				String id = rs.getString("ID");
				String pwd = rs.getString("PWD");
				Date regdate = rs.getDate("REGDATE");
				svo = new signupVO(no, name, id, pwd, regdate);
			} else {
				svo = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return svo;
	}

	// id, pwd를받아서 맞는 레코드를 출력
	public signupVO selectLoginCheckDB(signupVO svo) {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = con.prepareStatement(SELECT_LOGIN_CHECK_SQL);
			pstmt.setString(1, svo.getId());
			pstmt.setString(2, svo.getPwd());
			rs = pstmt.executeQuery();
			if (rs.next()) {
				int no = rs.getInt("NO");
				String name = rs.getString("NAME");
				String id = rs.getString("ID");
				String pwd = rs.getString("PWD");
				Date regdate = rs.getDate("REGDATE");
				svo = new signupVO(no, name, id, pwd, regdate);
			} else {
				svo = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return svo;
	}

	public Boolean insertDB(signupVO svo) {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		int rs = 0;
		try {
			pstmt = con.prepareStatement(INSERT_SQL);
			pstmt.setString(1, svo.getName());
			pstmt.setString(2, svo.getId());
			pstmt.setString(3, svo.getPwd());
			rs = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return (rs == 0) ? false : true;
	}

	public Boolean deleteDB(signupVO svo) {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		int rs = 0;
		try {
			pstmt = con.prepareStatement(DELETE_SQL);
			pstmt.setInt(1, svo.getNo());
			rs = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return (rs == 0) ? false : true;
	}

	public Boolean updateDB(signupVO svo) {
		Connection con = DBUtility.dbCon();
		PreparedStatement pstmt = null;
		int rs = 0;
		try {
			pstmt = con.prepareStatement(UPDATE_SQL);
			pstmt.setString(1, svo.getName());
			pstmt.setString(2, svo.getPwd());
			pstmt.setString(3, svo.getId());
			rs = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return (rs == 0) ? false : true;
	}
}
